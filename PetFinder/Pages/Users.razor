@page "/usuarios"
@using PetFinder.Areas.Identity;
@using Microsoft.AspNetCore.Identity


@inject IApplicationUserService aplicationUserService;
@inject SignInManager<ApplicationUser> sigInManager
@inject UserManager<ApplicationUser> userManager
@inject RoleManager<IdentityRole> roleManager

    <AuthorizeView Roles="@ApplicationUserService.ROLE_ADMIN">
        <Authorized>
            <section class="container">
                <div class="row justify-content-center">
                    <h1 class="mt-4 mb-4 mt-md-5 mb-md-5 lastPetsTitle">Usuarios de PetFinder</h1>
                </div>
                <div class="table-responsive">
                    <table class="table table-hover text-center">
                        <thead class="bg-orange">
                            <tr>
                                <th scope="col">Nombre</th>
                                <th scope="col">Email</th>
                                <th scope="col">Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- {foreach from=$users item=user} -->

                            @if (users == null)
                            {
                                <li class="list-group-item d-flex align-items-center">Cargando...</li>
                            }
                            else
                            {
                                @foreach (var user in users)
                                {
                                    <tr scope="row">
                                        <td class="align-middle">@user.Name</td>
                                        <td class="align-middle">@user.Email</td>
                                        <td class="align-middle">
                                            <div class="text-center">
                                                @if (user.isAdmin())
                                                {
                                                    <button type="button" value="Degradar" class="btn bg-orange text-white" @onclick="() => Downgrade(user)"> Degradar </button>
                                                }
                                                else
                                                {
                                                    <button type="button" value="Promover" class="btn bg-success text-white" @onclick="() => Upgrade(user)">Promover</button>
                                                }
                                                <button type="button" value="Delete" class="btn bg-red text-white" @onclick="() => Delete(user)">Eliminar</button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }

                            <!-- {/foreach} -->
                        </tbody>
                    </table>
                </div>
            </section>
            <Modal @ref="confirmationModal">
                <Title>
                    Eliminar
                </Title>
                <Body>
                    <p>
                        ¿Está seguro que desea eliminar?
                    </p>
                </Body>
                <Footer>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => confirmationModal.Close()">Cancelar</button>
                    <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="() => confirmationModal.Confirm()">Confirmar</button>
                </Footer>
            </Modal>

        </Authorized>
        <NotAuthorized>
            <Error>
                <Message> No tiene permisos para acceder a esta página</Message>
            </Error>
        </NotAuthorized>
    </AuthorizeView>
    

    @code {
        private IEnumerable<ApplicationUser> users { get; set; }
        private string Message { get; set; }
        private Modal confirmationModal { get; set; }


        private async Task Downgrade(ApplicationUser user)
        {
            await aplicationUserService.Downgrade(user.Id);
            users = await aplicationUserService.GetAll();
            StateHasChanged();

        }
        private async Task Upgrade(ApplicationUser user)
        {

            await aplicationUserService.Upgrade(user.Id);
            users = await aplicationUserService.GetAll();
            StateHasChanged();
        }
        protected override async Task OnInitializedAsync()
        {
            try
            {
                users = await aplicationUserService.GetAll();
            }
            catch (Exception e)
            {
                Message = e.Message;
            }
        }

        private void Delete(ApplicationUser currUser)
        {
            confirmationModal.isWarning = true;
            confirmationModal.Open();
            confirmationModal.OnConfirm(async () =>
            {
                var result = await userManager.DeleteAsync(currUser);

                if (result.Succeeded)
                {
                    //Actualizo la lista con la db
                    users = await aplicationUserService.GetAll();
                    StateHasChanged();
                }

            });
        }

    }
