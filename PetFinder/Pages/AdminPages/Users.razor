@page "/usuarios"
@using PetFinder.Areas.Identity
@using Microsoft.AspNetCore.Identity
@inject IApplicationUserService ApplicationUserService
@inject SignInManager<ApplicationUser> SigInManager
@inject RoleManager<IdentityRole> RoleManager

<AuthorizeView Roles="@Data.ApplicationUserService.RoleAdmin">
    <Authorized>
        <section class="container">
            <div class="row justify-content-center">
                <h1 class="mt-4 mb-4 mt-md-5 mb-md-5 lastPetsTitle">Usuarios de PetFinder</h1>
            </div>
            <div class="table-responsive">
                <table class="table table-hover text-center">
                    <thead class="bg-blue">
                    <tr>
                        <th scope="col">Nombre</th>
                        <th scope="col">Email</th>
                        <th scope="col">Acciones</th>
                    </tr>
                    </thead>
                    <tbody>
                    @if (UsersObtained == null)
                    {
                        <tr class="list-group-item d-flex align-items-center">Cargando...</tr>
                    }
                    else
                    {
                        foreach (var user in UsersObtained)
                        {
                            <tr scope="row">
                                <td class="align-middle">@user.Name</td>
                                <td class="align-middle">@user.Email</td>
                                <td class="align-middle">
                                    <div class="text-center">
                                        @if (user.IsAdmin())
                                        {
                                            <button type="button" value="Degradar" class="btn bg-blue text-white" @onclick="() => Downgrade(user)"> Degradar </button>
                                        }
                                        else
                                        {
                                            <button type="button" value="Promover" class="btn bg-emerald text-white" @onclick="() => Upgrade(user)">Promover</button>
                                        }
                                        <button type="button" value="Delete" class="btn bg-red text-white" @onclick="() => Delete(user)">Eliminar</button>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    </tbody>
                </table>
            </div>
        </section>

        <Modal @ref="ConfirmationModal">
            <Title>
                Eliminar
            </Title>
            <Body>
            <p>
                ¿Está seguro que desea eliminar?
            </p>
            </Body>
            <Footer>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => ConfirmationModal.Close()">Cancelar</button>
                <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="() => ConfirmationModal.Confirm()">Confirmar</button>
            </Footer>
        </Modal>
    </Authorized>

    <NotAuthorized>
        <Error>
            <Message> No tiene permisos para acceder a esta página</Message>
        </Error>
    </NotAuthorized>
</AuthorizeView>

@code {
    private IEnumerable<ApplicationUser> UsersObtained { get; set; }
    private string Message { get; set; }
    private Modal ConfirmationModal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            UsersObtained = await ApplicationUserService.GetAll();
        }
        catch (Exception e)
        {
            Message = e.Message;
        }
    }

    private async Task Downgrade(ApplicationUser user)
    {
        await ApplicationUserService.Downgrade(user.Id);
        UsersObtained = await ApplicationUserService.GetAll();
        StateHasChanged();
    }

    private async Task Upgrade(ApplicationUser user)
    {
        await ApplicationUserService.Upgrade(user.Id);
        UsersObtained = await ApplicationUserService.GetAll();
        StateHasChanged();
    }

    private void Delete(ApplicationUser currUser)
    {
        ConfirmationModal.IsWarning = true;
        ConfirmationModal.Open();
        ConfirmationModal.OnConfirm(async () =>
        {
            var result = await ApplicationUserService.DeleteAsync(currUser);
            if (result.Succeeded)
            {
                //Actualizo la lista con la db
                UsersObtained = await ApplicationUserService.GetAll();
                StateHasChanged();
            }
        });
    }

}