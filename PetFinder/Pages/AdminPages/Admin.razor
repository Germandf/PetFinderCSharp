@page "/admin"
@page "/admin/{record:int}"
@using PetFinder.Areas.Identity
@inject ICategoryService<City> CityService
@inject ICategoryService<AnimalType> AnimalTypeService
@inject IPetService PetService
@inject IApplicationUserService ApplicationUserService

<AuthorizeView Roles="@Data.ApplicationUserService.RoleAdmin">
    <Authorized>
        <section class="container-fluid bg-orange-dark">
            <div class="row">
                <div class="col-12 mt-3 mb-3">
                    <a href="agregar-mascota" class="btn bg-orange text-white mr-2 my-1">
                        <span>
                            <i class="fa fa-paw"></i>
                        </span>
                        <span>Añadir mascota perdida</span>
                    </a>
                    <a href="agregar-ciudad" class="btn bg-orange text-white mr-2 my-1">
                        <span>
                            <i class="fa fa-city"></i>
                        </span>
                        <span>Añadir ciudad</span>
                    </a>
                    <a href="agregar-tipo-de-animal" class="btn bg-orange text-white mr-2 my-1">
                        <span>
                            <i class="fa fa-feather"></i>
                        </span>
                        <span>Añadir tipo de animal</span>
                    </a>
                    <a href="usuarios" class="btn bg-orange text-white mr-2 my-1">
                        <span>
                            <i class="fa fa-users"></i>
                        </span>
                        <span>Tabla de usuarios</span>
                    </a>
                    <a href="logs" class="btn bg-orange text-white mr-2 my-1">
                        <span>
                            <i class="fas fa-clipboard-list"></i>
                        </span>
                        <span>Logger</span>
                    </a>
                </div>
            </div>
        </section>

        <section class="container">
            <div class="row">
                <div class="col-12 col-md-6 mt-4">
                    <ul class="list-group">
                        <li class="list-group-item bg-orange text-white m-0">Ciudades</li>
                        @if (Cities == null)
                        {
                            <li class="w-100 text-center mt-3">
                                <div class="spinner-border" role="status">
                                    <span class="sr-only">Loading...</span>
                                </div>
                            </li>
                        }
                        else
                        {
                            @foreach (var city in Cities)
                            {
                                <li class="list-group-item d-flex align-items-center">
                                    <div class="col-6 text-left">@city.Name</div>
                                    <div class="col-6 text-right">
                                        <a href="editar-ciudad/@city.Id" class="btn bg-gray text-white">Editar</a>
                                        <button type="button" value="Delete" class="btn bg-red text-white"
                                                @onclick="async () => await DeleteCity(city)">
                                            Eliminar
                                        </button>
                                    </div>
                                </li>
                            }
                        }
                    </ul>
                </div>
                <div class="col-12 col-md-6 mt-4">
                    <ul class="list-group">
                        <li class="list-group-item  bg-orange text-white m-0">Tipo de animal</li>
                        @if (AnimalTypes == null)
                        {
                            <li class="w-100 text-center mt-3">
                                <div class="spinner-border" role="status">
                                    <span class="sr-only">Loading...</span>
                                </div>
                            </li>
                        }
                        else
                        {
                            @foreach (var animalType in AnimalTypes)
                            {
                                <li class="list-group-item d-flex align-items-center">
                                    <div class="col-6 text-left">@animalType.Name</div>
                                    <div class="col-6 text-right">
                                        <a href="editar-tipo-de-animal/@animalType.Id" class="btn bg-gray text-white">Editar</a>
                                        <button type="button" value="Delete" class="btn bg-red text-white"
                                                @onclick="async () => await DeleteAnimalType(animalType)">
                                            Eliminar
                                        </button>
                                    </div>
                                </li>
                            }
                        }
                    </ul>
                </div>
            </div>
        </section>

        <section class="container">
            <div class="row justify-content-center">
                <h1 class="mt-4 mb-4 mt-md-5 mb-md-5 lastPetsTitle">Últimas mascotas perdidas</h1>
            </div>
            @if (Pets == null)
            {
                <div class="w-100 text-center">
                    <div class="spinner-border large-spinner" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                </div>
            }
            else if (!Pets.Any())
            {
                <p class="lastPetsTitle text-center">¡Lo siento! Aún no tenemos mascotas perdidas que mostrar</p>
            }
            else
            {
                <div class="row">
                    @foreach (var pet in Pets)
                    {
                        <PetCard Pet="pet" User="User"></PetCard>
                    }
                </div>
                <PaginationButtons Record="@Record" PageSize="@pageSize" PetsCount="@Pets.Count()" IsAdmin="true"></PaginationButtons>
            }
        </section>

        <Modal @ref="ConfirmationModal">
            <Title>
                Advertencia
            </Title>
            <Body>
            <p>El item que está a punto de eliminar tiene mascotas asociadas</p>
            <p>¿Está seguro que desea eliminar?</p>
            </Body>
            <Footer>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => ConfirmationModal.Close()">Cancelar</button>
                <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="() => ConfirmationModal.Confirm()">Confirmar</button>
            </Footer>
        </Modal>
    </Authorized>

    <NotAuthorized>
        <Error>
            <Message> No tiene permisos para acceder a esta página</Message>
        </Error>
    </NotAuthorized>
</AuthorizeView>

@code {

    [Parameter]
    public int Record { get; set; }

    private readonly int pageSize = 12;

    private IEnumerable<City> Cities { get; set; }
    private IEnumerable<AnimalType> AnimalTypes { get; set; }
    private IEnumerable<Pet> Pets { get; set; }
    private string Message { get; set; }
    private Modal ConfirmationModal { get; set; }
    private ApplicationUser User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        User = await ApplicationUserService.GetCurrent();
        try
        {
            Cities = await CityService.GetAll();
            AnimalTypes = await AnimalTypeService.GetAll();
        }
        catch (Exception e)
        {
            Message = e.Message;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            Pets = await PetService.GetAll();
            Pets = Pets.Skip(Record).Take(pageSize).ToList();
        }
        catch (Exception e)
        {
            Message = e.Message;
        }
    }

    private async Task DeleteAnimalType(AnimalType animalType)
    {
        var result = false;
        if (await AnimalTypeService.HasPetsAssociated(animalType))
        {
            ConfirmationModal.IsWarning = true;
            ConfirmationModal.Open();
            ConfirmationModal.OnConfirm(async () => { result = await AnimalTypeService.Delete(animalType.Id); });
        }
        else
        {
            result = await AnimalTypeService.Delete(animalType.Id);
        }
        if (result)
        {
            AnimalTypes = await AnimalTypeService.GetAll();
            StateHasChanged(); // Actualizo la lista
        }
    }

    private async Task DeleteCity(City city)
    {
        var result = false;
        if (await CityService.HasPetsAssociated(city))
        {
            ConfirmationModal.IsWarning = true;
            ConfirmationModal.Open();
            ConfirmationModal.OnConfirm(async () => { result = await CityService.Delete(city.Id); });
        }
        else
        {
            result = await CityService.Delete(city.Id);
        }
        if (result)
        {
            Cities = await CityService.GetAll();
            StateHasChanged(); // Actualizo la lista
        }
    }

}