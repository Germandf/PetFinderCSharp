@page "/filtrar"
@page "/filtrar/{filter1}"
@page "/filtrar/{filter1}/{record:int}"
@page "/filtrar/{filter1}/{filter2}"
@page "/filtrar/{filter1}/{filter2}/{record:int}"
@page "/filtrar/{filter1}/{filter2}/{filter3}"
@page "/filtrar/{filter1}/{filter2}/{filter3}/{record:int}"
@page "/filtrar/{filter1}/{filter2}/{filter3}/{filter4}"
@page "/filtrar/{filter1}/{filter2}/{filter3}/{filter4}/{record:int}"
@using PetFinder.Areas.Identity
@inject ICategoryService<City> CityService
@inject ICategoryService<AnimalType> AnimalTypeService
@inject ICategoryService<Gender> GenderService
@inject IPetService PetService
@inject IApplicationUserService ApplicationUserService

<PetFilter Cities="_cities" AnimalTypes="_animalTypes" Genders="_genders"></PetFilter>
<section class="container">
    <div class="row justify-content-center">
        <h1 class="mt-5 mb-4 lastPetsTitle">Mascotas filtradas</h1>
    </div>
    @if (Pets == null)
    {
        <h2>Loading...</h2>
    }
    else if (!Pets.Any())
    {
        <p class="lastPetsTitle text-center">No se encontraron mascotas con estos filtros, ¡Prueba otros!</p>
    }
    else
    {
        <div class="row">
            @foreach (var pet in Pets)
            {
                <PetCard Pet="pet" User="User"></PetCard>
            }
        </div>
        <PaginationButtons Record="@Record" PageSize="@PageSize" PetsCount="@Pets.Count()" IsHome="true"></PaginationButtons>
    }
</section>

@code {

    [Parameter]
    public string Filter1 { get; set; }

    [Parameter]
    public string Filter2 { get; set; }

    [Parameter]
    public string Filter3 { get; set; }

    [Parameter]
    public string Filter4 { get; set; }

    [Parameter]
    public int Record { get; set; }

    private const int PageSize = 12;
    private ApplicationUser User { get; set; }
    private IEnumerable<Pet> Pets { get; set; }

    private IEnumerable<City> _cities;
    private IEnumerable<AnimalType> _animalTypes;
    private IEnumerable<Gender> _genders;

    private string Message { get; set; }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        User = await ApplicationUserService.GetCurrent();
        _cities = await CityService.GetAll();
        _animalTypes = await AnimalTypeService.GetAll();
        _genders = await GenderService.GetAll();
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            Pets = await PetService.GetAllByFilter(Filter1, Filter2, Filter3, Filter4);
            Pets = Pets.Skip(Record).Take(PageSize).ToList();
        }
        catch (Exception e)
        {
            Message = e.Message;
        }
    }

}