@page "/mis-mascotas"
@page "/mis-mascotas/{record:int}"
@using PetFinder.Areas.Identity
@using Microsoft.AspNetCore.Identity
@inject IPetService PetService
@inject UserManager<ApplicationUser> UserManager
@inject IApplicationUserService ApplicationUserService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<section class="container-fluid bg-blue-whiter">
    <div class="row">
        <div class="col-12 mt-3 mb-3">
            <a href="agregar-mascota" class="btn bg-blue text-white mr-2 mt-1">
                <span>
                    <i class="fa fa-paw"></i>
                </span>
                <span>Añadir mascota perdida</span>
            </a>
        </div>
    </div>
</section>
<section class="container">
    <div class="row justify-content-center">
        <h1 class="mt-4 mb-4 mt-md-5 mb-md-5 lastPetsTitle">Mis mascotas perdidas</h1>
    </div>
    @if (Pets == null || IsLoading)
    {
        <div class="w-100 text-center">
            <div class="spinner-border large-spinner" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    }
    else if (!Pets.Any())
    {
        <p class="lastPetsTitle text-center">Aún no tienes mascotas perdidas, ¿acabás de perder una? Lo sentimos, ¡agrégala a PetFinder para advertir al resto!</p>
    }
    else
    {
        <div class="row">
            @foreach (var pet in Pets)
            {
                <PetCard Pet="pet" User="User">
                </PetCard>
            }
        </div>
        <PaginationButtons Record="@Record" PageSize="@PageSize" PetsCount="@Pets.Count()" IsMyPets="true"></PaginationButtons>
    }
</section>

@code {

    [Parameter]
    public int Record { get; set; }

    [CascadingParameter]
    protected Task<AuthenticationState> AuthStat { get; set; }

    private const int PageSize = 12;
    private IEnumerable<Pet> Pets { get; set; }
    private string Message { get; set; }
    private bool IsLoading { get; set; }
    private ApplicationUser User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userClaims = authState.User;
        if (!userClaims.Identity.IsAuthenticated) //Si no está autenticado redirigimos
        {
            var currUri = NavigationManager.Uri;
            var baseUri = NavigationManager.BaseUri;
            currUri = currUri.Replace(baseUri, "/");

            NavigationManager.NavigateTo($"Identity/Account/Login?returnUrl={currUri}", true);
        }
        else
        {
            User = await ApplicationUserService.GetCurrent();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        IsLoading = true;
        try
        {
            var user = (await AuthStat).User;
            var userId = UserManager.GetUserId(user);
            Pets = await PetService.GetAllByUser(userId);
            Pets = Pets.Skip(Record).Take(PageSize).ToList();
        }
        catch (Exception e)
        {
            Message = e.Message;
        }
        IsLoading = false;
    }

}