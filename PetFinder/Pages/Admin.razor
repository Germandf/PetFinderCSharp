@page "/admin"
@page "/admin/{record:int}"
@using PetFinder.Areas.Identity;
@inject ICityService CityService
@inject IAnimalTypeService AnimalTypeService
@inject IPetService PetService
@inject IApplicationUserService applicationUserService

<AuthorizeView Roles="@ApplicationUserService.ROLE_ADMIN">
    <Authorized>
        <section class="container-fluid bg-orange-dark">
            <div class="row">
                <div class="col-12 mt-3 mb-3">
                    <a href="agregar-mascota" class="btn bg-orange text-white mr-2 mt-1">
                        <span><i class="fa fa-paw"></i></span>
                        <span>Añadir mascota perdida</span>
                    </a>
                    <a href="agregar-ciudad" class="btn bg-orange text-white mr-2 mt-1">
                        <span><i class="fa fa-city"></i></span>
                        <span>Añadir ciudad</span>
                    </a>
                    <a href="agregar-tipo-de-animal" class="btn bg-orange text-white mr-2 mt-1">
                        <span><i class="fa fa-feather"></i></span>
                        <span>Añadir tipo de animal</span>
                    </a>
                    <a href="usuarios" class="btn bg-orange text-white mr-2 mt-1">
                        <span><i class="fa fa-users"></i></span>
                        <span>Tabla de usuarios</span>
                    </a>
                </div>
            </div>
        </section>

        <section class="container">
            <div class="row">
                <div class="col-12 col-md-6 mt-4">
                    <ul class="list-group">
                        <li class="list-group-item bg-orange text-white m-0">Ciudades</li>
                        @if (cities == null)
                        {
                            <li class="w-100 text-center mt-3">
                                <div class="spinner-border" role="status">
                                    <span class="sr-only">Loading...</span>
                                </div>
                            </li>
                        }
                        else
                        {
                            @foreach (var city in cities)
                            {
                                <li class="list-group-item d-flex align-items-center">
                                    <div class="col-6 text-left">@city.Name</div>
                                    <div class="col-6 text-right">
                                        <a href="editar-ciudad/@city.Id" class="btn bg-gray text-white">Editar</a>
                                        <button type="button" value="Delete" class="btn bg-red text-white" @onclick="() => DeleteCity(city)">Eliminar</button>
                                    </div>
                                </li>
                            }
                        }
                    </ul>
                </div>
                <div class="col-12 col-md-6 mt-4">
                    <ul class="list-group">
                        <li class="list-group-item  bg-orange text-white m-0">Tipo de animal</li>
                        @if (animalTypes == null)
                        {
                            <li class="w-100 text-center mt-3">
                                <div class="spinner-border" role="status">
                                    <span class="sr-only">Loading...</span>
                                </div>
                            </li>
                        }
                        else
                        {
                            @foreach (var animalType in animalTypes)
                            {
                                <li class="list-group-item d-flex align-items-center">
                                    <div class="col-6 text-left">@animalType.Name</div>
                                    <div class="col-6 text-right">
                                        <button type="button" value="Delete" class="btn bg-red text-white" @onclick="() => DeleteAnimalType(animalType)">Eliminar</button>
                                        <a href="editar-tipo-de-animal/@animalType.Id" class="btn bg-gray text-white">Editar</a>
                                    </div>
                                </li>
                            }
                        }
                    </ul>
                </div>
            </div>
        </section>

        <section class="container">
            <div class="row justify-content-center">
                <h1 class="mt-4 mb-4 mt-md-5 mb-md-5 lastPetsTitle">Últimas mascotas perdidas</h1>
            </div>
            @if (pets == null)
            {
                <div class="w-100 text-center">
                    <div class="spinner-border large-spinner" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                </div>
            }
            else
            {
                <div class="row">
                    @foreach (Pet pet in pets)
                    {
                        <PetCard pet="pet" user="user"></PetCard>
                    }
                </div>
                <PaginationButtons record="@record" pageSize="@pageSize" petsCount="@pets.Count()" isAdmin="true"></PaginationButtons>
            }
        </section>

        <Modal @ref="confirmationModal">
            <Title>
                Eliminar
            </Title>
            <Body>
                <p>
                    ¿Está seguro que desea eliminar?
                </p>
            </Body>
            <Footer>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => confirmationModal.Close()">Cancelar</button>
                <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="() => confirmationModal.Confirm()">Confirmar</button>
            </Footer>
        </Modal>
    </Authorized>

    <NotAuthorized>
        <Error>
            <Message> No tiene permisos para acceder a esta página</Message>
        </Error>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public int record { get; set; }
    private int pageSize = 12;

    private IEnumerable<City> cities { get; set; }
    private IEnumerable<AnimalType> animalTypes { get; set; }
    private IEnumerable<Pet> pets { get; set; }

    private string Message { get; set; }
    private Modal confirmationModal { get; set; }

    private ApplicationUser user { get; set; }

    protected override async Task OnInitializedAsync()
    {
        user = await applicationUserService.GetCurrent();

        try
        {
            cities = await CityService.GetAll();
            animalTypes = await AnimalTypeService.GetAll();
        }
        catch (Exception e)
        {
            Message = e.Message;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            pets = await PetService.GetAll();
            pets = pets.Skip(record).Take(pageSize).ToList();
        }
        catch (Exception e)
        {
            Message = e.Message;
        }
    }

    private void DeleteAnimalType(AnimalType animalType)
    {
        confirmationModal.isWarning = true;
        confirmationModal.Open();
        confirmationModal.OnConfirm(async () =>
        {
            bool result = await AnimalTypeService.Delete(animalType.Id);
            if (result)
            {
                //Actualizo la lista con la db
                animalTypes = await AnimalTypeService.GetAll();
                StateHasChanged();
            }
        });
    }
    private void DeleteCity(City city)
    {
        confirmationModal.isWarning = true;
        confirmationModal.Open();
        confirmationModal.OnConfirm(async () =>
        {
            bool result = await CityService.Delete(city.Id);
            if (result)
            {
                //Actualizo la lista con la db
                cities = await CityService.GetAll();
                StateHasChanged();
            }
        });
    }
}