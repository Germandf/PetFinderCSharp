@page "/"
@page "/{record:int}"
@using PetFinder.Areas.Identity
@inject ICityService CityService
@inject IAnimalTypeService AnimalTypeService
@inject IGenderService GenderService
@inject IPetService PetService
@inject IApplicationUserService ApplicationUserService

<PetFilter Cities="_cities" AnimalTypes="_animalTypes" Genders="_genders"></PetFilter>
<section class="container">
    <div class="row justify-content-center">
        <h1 class="mt-4 mb-4 mt-md-5 mb-md-5 lastPetsTitle">Últimas mascotas perdidas</h1>
    </div>
    @if (Pets == null)
    {
        <h2>Loading...</h2>
    }
    else if (!Pets.Any())
    {
        <p class="lastPetsTitle text-center">¡Lo siento! Aún no tenemos mascotas perdidas que mostrar</p>
    }
    else
    {
        <div class="row">
            @foreach (var pet in Pets)
            {
                <PetCard Pet="pet" User="User"></PetCard>
            }
        </div>
        <PaginationButtons Record="@Record" PageSize="@PageSize" PetsCount="@Pets.Count()" IsHome="true"></PaginationButtons>
    }
</section>

@code {

    [Parameter]
    public int Record { get; set; }

    private const int PageSize = 12;

    private ApplicationUser User { get; set; }
    private IEnumerable<Pet> Pets { get; set; }
    private string Message { get; set; }

    private IEnumerable<City> _cities;
    private IEnumerable<AnimalType> _animalTypes;
    private IEnumerable<Gender> _genders;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        User = await ApplicationUserService.GetCurrent();
        _cities = await CityService.GetAll();
        _animalTypes = await AnimalTypeService.GetAll();
        _genders = await GenderService.GetAll();
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            Pets = await PetService.GetAll();
            Pets = Pets.Skip(Record).Take(PageSize).ToList();
        }
        catch (Exception e)
        {
            Message = e.Message;
        }
    }

}