@page "/agregar-mascota"
@page "/editar-mascota/{id:int}"
@using Microsoft.AspNetCore.Identity
@using PetFinder.Areas.Identity;
@using PetFinder.Helpers;

@inject IPetService PetService
@inject ICityService CityService
@inject IAnimalTypeService AnimalTypeService
@inject IGenderService GenderService
@inject IFileService FileService
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> userManager;
@inject AuthenticationStateProvider AuthenticationStateProvider


<AuthorizeView>
    <Authorized>
        <div class="row">
            <div class="col-12 mt-5 text-center">
                <EditForm Context="contextForm" Model="@pet" id="addPetForm" class="form-signin text-left shadow rounded">
                    <!-- Muestra el titulo correspondiente -->
                    @if (id != 0 && isError == false)
                    {
                        <h1 class="h3 mb-3 font-weight-normal">Editar mascota</h1>
                    }
                    else
                    {
                        <h1 class="h3 mb-3 font-weight-normal">Agregar mascota</h1>
                    }
                    <!-- Pet -->
                    <label for="inputName" class="sr-only mt-3 ">Nombre</label>
                    <input id="inputName" type="text" class="mt-3 form-control" placeholder="Nombre" required autofocus="" name="name" @bind="pet.Name">
                    <!-- City -->
                    <label for="inputCity" class="sr-only mt-3 ">Ciudad</label>
                    <select id="inputCity" class="d-inline form-control mt-3" name="city" @bind="pet.CityId">
                        @if (cities == null)
                        {
                            <option value="">Loading...</option>
                        }
                        else
                        {
                            <option value="none" selected disabled hidden>Ciudad</option>
                            @foreach (City city in cities)
                            {

                                <option value="@city.Id">@city.Name</option>
                            }
                        }
                    </select>
                    <!-- Pet Type -->
                    <label for="inputAnimalType" class="sr-only mt-3">Tipo de animal</label>
                    <select id="inputAnimalType" class="d-inline form-control mt-3" required name="animalType" @bind="pet.AnimalTypeId">
                        @if (animalTypes == null)
                        {
                            <option value="">Loading...</option>
                        }
                        else
                        {
                            <option value="none" selected disabled hidden>Tipo de mascota</option>
                            @foreach (AnimalType animalType in animalTypes)
                            {
                                <option value="@animalType.Id">@animalType.Name</option>
                            }
                        }
                    </select>
                    <!-- Gender -->
                    <label for="inputGenderType" class="sr-only mt-3">Genero</label>
                    <select id="inputGenderType" class="d-inline form-control mt-3" required name="gender" @bind="pet.GenderId">
                        @if (genders == null)
                        {
                            <option value="">Loading...</option>
                        }
                        else
                        {
                            <option value="none" selected disabled hidden>Genero</option>
                            @foreach (Gender gender in genders)
                            {
                                <option value="@gender.Id">@gender.Name</option>
                            }
                        }
                    </select>
                    <!-- Lost Date -->
                    <label for="inputDateTime" class="sr-only mt-3">Fecha de extravio</label>
                    <input id="inputDateTime" required type="date" class="mt-3 form-control" placeholder="Fecha de extravio" autofocus="" name="date" @bind="pet.Date">
                    <!-- Phone Number -->
                    <label for="inputPhone" class="sr-only mt-3">Teléfono</label>
                    <input id="inputPhone" type="number" class="mt-3 form-control" placeholder="Teléfono" required autofocus="" name="phone" @bind="pet.PhoneNumber">
                    <!-- Photo -->
                    <div class="input-group mt-3">
                        <div class="custom-file">
                            <BlazorInputFile.InputFile OnChange="@HandleFileSelected" class="custom-file-input" id="photo" name="photo" />
                            <label class="custom-file-label" for="photo">
                                @if (file == null)
                                {
                                    <span>Elegir foto</span>
                                }
                                else
                                {
                                    <span>Foto: @file.Name</span>
                                }
                            </label>
                        </div>
                    </div>
                    <!-- Description -->
                    <label for="inputDescription" class="sr-only mt-3 ">Descripción</label>
                    <textarea id="inputDescription" required type="text" class="mt-3 form-control" placeholder="Descripción" autofocus="" name="description" maxlength="200" @bind="pet.Description"></textarea>
                    <div class="d-block text-right">
                        <button class="mt-2 text-white btn-lg bg-orange-dark" type="button" value="Cancel" @onclick="Cancel">Cancelar</button>
                        <button class="mt-2 text-white btn-lg bg-orange" type="submit" value="Save" @onclick="SavePet">Confirmar</button>
                    </div>
                    @if (isError)
                    {
                        <div class="alert alert-danger mt-2">
                            <ul>
                                @foreach (string error in errorsSaving)
                                {
                                    <li>@error</li>
                                }
                            </ul>
                        </div>
                    }
                </EditForm>
            </div>
        </div>

        <Modal @ref="modal">
            <Title>
                ¡Se guardó con éxito!
            </Title>
            <Body>
                <p>
                    @pet.Name fué agregado a nuestra base de datos. ¡Mucha suerte!
                </p>
            </Body>
            <Footer>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick='() => NavigationManager.NavigateTo("/mis-mascotas")'>Cerrar</button>
            </Footer>
        </Modal>
    </Authorized>

</AuthorizeView>

@code {
    [Parameter]
    public int id { get; set; }

    private Pet pet = new Pet();
    private List<string> errorsSaving = new List<string>();
    public string error { get; set; }
    public bool isError { get; set; }
    private Modal modal { get; set; }

    private string userId;

    private IEnumerable<City> cities;
    private IEnumerable<AnimalType> animalTypes;
    private IEnumerable<Gender> genders;

    IFileListEntry file;

    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userClaims = authState.User;
        userId = userManager.GetUserId(userClaims);

        if (!userClaims.Identity.IsAuthenticated) //Si no está autenticado redirigimos
        {
            string currUri = NavigationManager.Uri;
            string baseUri = NavigationManager.BaseUri;
            currUri = currUri.Replace(baseUri, "/");

            NavigationManager.NavigateTo($"Identity/Account/Login?returnUrl={currUri}", forceLoad: true);
        }

        if (id != 0)
        {
            pet = await PetService.Get(id);
            if (pet == null)
            {
                error = "No se encontró la mascota";
                isError = true;
                pet = new Pet();
            }
            else
            {
                if (!await PetService.CurrUserCanEdit(pet))
                {
                    error = "No podes editar está mascota";
                    isError = true;
                    pet = new Pet();
                }
            }
        }
        cities = await CityService.GetAll();
        animalTypes = await AnimalTypeService.GetAll();
        genders = await GenderService.GetAll();
    }

    protected async Task SavePet()
    {
        isError = false;
        errorsSaving = new List<string>();

        GenericResult result = await PetService.Save(pet, file);
        if (result.Success)
        {
            modal.Open();
        }
        else
        {
            isError = true;
            errorsSaving = result.Errors;
            StateHasChanged();
        }
        
    }


    void HandleFileSelected(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
    }

    protected void Cancel()
    {
        NavigationManager.NavigateTo("/mis-mascotas");
    }
}
