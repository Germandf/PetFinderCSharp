@using PetFinder.Areas.Identity;
@using Newtonsoft.Json;
@using PetFinder.Areas.Identity.Extensions;
@using Microsoft.Extensions.Configuration;
@using System.Net.Http.Headers;
@inject IApplicationUserService ApplicationUserService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IConfiguration Configuration

<div class="row">
    <h3 class="petSubTitle mt-3 mx-4">Comentarios</h3>
    <section class="mb-2 col-12">
        <AuthorizeView>
            <Authorized>
                <form id="form-new-comment" class="g-bg-secondary rounded shadow mt-2 w-100 text-left p-2 u-shadow-v18 ">
                    <p class="mt-2">Agregar nuevo comentario... </p>
                    <textarea class="w-100 p-2" type="text" id="message" name="message" maxlength="200" @bind="newComment.Message"></textarea>
                    <p class="mt-2 mb-2">
                        <span class="mr-2">¿Que tan seguro estas de haberlo visto?</span><input type="range" min="1" max="5" id="rate" @bind="newComment.Rate">
                    </p>
                    <button type="button" class="btn bg-orange text-white mr-2 mt-1" @onclick="() => CreateComment(newComment)">
                        Comentar
                    </button>
                </form>
                <ModalWithValue TypeValue="string" @ref="editModal">
                    <Title>
                        Editar
                    </Title>
                    <Body>
                        <p>
                            <textarea class="w-100 p-2" type="text" maxlength="200" @bind="editModal.value"></textarea>
                        </p>
                    </Body>
                    <Footer>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => editModal.Close()">Cancelar</button>
                        <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="() => editModal.Confirm()">Confirmar</button>
                    </Footer>
                </ModalWithValue>
                <Modal @ref="confirmationModal">
                    <Title>
                        Eliminar
                    </Title>
                    <Body>
                        <p>
                            ¿Está seguro que desea eliminar?
                        </p>
                    </Body>
                    <Footer>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => confirmationModal.Close()">Cancelar</button>
                        <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="() => confirmationModal.Confirm()">Confirmar</button>
                    </Footer>
                </Modal>
                <Modal @ref="errorModal">
                    <Title>
                        Error
                    </Title>
                    <Body>
                        <p>
                            @errorMessage
                        </p>
                    </Body>
                    <Footer>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => errorModal.Close()">Entendido</button>
                    </Footer>
                </Modal>
                <Modal @ref="successModal">
                    <Title>
                        ¡Éxito!
                    </Title>
                    <Body>
                        <p>
                            La tarea solicitada se realizó correctamente
                        </p>
                    </Body>
                    <Footer>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => successModal.Close()">Cerrar</button>
                    </Footer>
                </Modal>
            </Authorized>
        </AuthorizeView>
    </section>
    <section id="comments" class="col-12">
        @foreach (Comment comment in comments)
        {
            <div class="media g-mb-30 media-comment">
                <div class="media-body shadow g-bg-secondary g-pa-30">
                    <div class="g-mb-15">
                        <h3 class="h5 mb-0">@comment.User.Name @comment.User.Surname </h3>
                    </div>
                    <p>@comment.Message</p>
                    <p><b>Seguridad de haberlo visto @comment.Rate / 5</b></p>
                    <AuthorizeView>
                        <Authorized>
                            <!-- Si es el dueño del comentario o es admin -->
                            <button class="btn" @onclick="() => UpdateComment(comment)">
                                <i class="text-primary fa fa-pencil-alt"></i>
                            </button>
                            <button class="btn" @onclick="() => DeleteComment(comment)">
                                <i class="text-danger fa fa-trash"></i>
                            </button>
                        </Authorized>
                    </AuthorizeView>
                </div>
            </div>
        }
        @if (comments.Count == 0)
        {
            <p class="ml-2">No hay comentarios disponibles. Si eres un usuario registrado, eres libre de comentar cuanto quieras.</p>
        }
    </section>
</div>

@code {
    [Parameter]
    public int PetId { get; set; }

    private readonly HttpClient httpClient = new HttpClient();
    private static string ERROR_BAD_REQUEST = "El comentario tenía datos incorrectos, intente nuevamente";
    private static string ERROR_UNAUTHORIZED = "No tienes permiso para realizar esta acción";
    private static string ERROR_NOT_FOUND = "No se encontró el objeto solicitado";
    private static string ERROR_CONFLICT = "No se ha podido completar la acción, intenta más tarde";
    private static string ERROR_UNKNOWN = "Ha ocurrido un error inesperado, ponte en contacto con uno de los administradores";

    private ApplicationUser user = null;
    private Comment newComment = new Comment();
    private List<Comment> comments = new List<Comment>();
    private ModalWithValue<string> editModal { get; set; }
    private Modal confirmationModal { get; set; }
    private Modal errorModal { get; set; }
    private Modal successModal { get; set; }

    private string JWT { get; set; }
    private string URLApiComments { get; set; }
    private string errorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        user = await ApplicationUserService.GetCurrent();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userClaims = authState.User;
        URLApiComments = Configuration["UrlApiController"]+"comentarios";
        await GetComments();
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", userClaims.Identity.GetJwt());
    }

    private async void CreateComment(Comment comment)
    {
        comment.PetId = PetId;
        comment.UserId = user.Id;
        // Preparo content del post
        var json = JsonConvert.SerializeObject(comment);
        var buffer = System.Text.Encoding.UTF8.GetBytes(json);
        var byteContent = new ByteArrayContent(buffer);
        byteContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");
        // POST api/comentarios
        try
        {
            HttpResponseMessage response = await httpClient.PostAsync(URLApiComments, byteContent);
            await CheckResponse(response);
        }
        catch (HttpRequestException exception)
        {
            ShowModalError(ERROR_UNKNOWN + "Código de error: " + exception);
        }
        newComment.Message = "";
    }

    private async Task GetComments()
    {
        // GET api/comentarios/id
        try
        {
            HttpResponseMessage response = await httpClient.GetAsync(URLApiComments + "/mascota/" + PetId.ToString());
            Comment[] commentsFromApi = await response.Content.ReadAsAsync<Comment[]>();
            if (commentsFromApi == null)
                commentsFromApi = new Comment[0];
            comments.Clear();
            comments.AddRange(commentsFromApi);
            comments.Reverse();
            StateHasChanged();
        }
        catch (HttpRequestException exception)
        {
            ShowModalError(ERROR_UNKNOWN + "Código de error: " + exception);
        }
    }

    private void UpdateComment(Comment comment)
    {
        editModal.valueChange(comment.Message);
        editModal.isEditing = true;
        editModal.Open();
        editModal.OnConfirm(async () =>
        {
            comment.Message = editModal.value;
            // Preparo content del put
            var json = JsonConvert.SerializeObject(comment);
            var buffer = System.Text.Encoding.UTF8.GetBytes(json);
            var byteContent = new ByteArrayContent(buffer);
            byteContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");
            // PUT api/comentarios/id
            try
            {
                HttpResponseMessage response = await httpClient.PutAsync(URLApiComments + "/" + comment.Id.ToString(), byteContent);
                await CheckResponse(response);
            }
            catch (HttpRequestException exception)
            {
                ShowModalError(ERROR_UNKNOWN + "Código de error: " + exception);
            }
        });
    }

    private void DeleteComment(Comment comment)
    {
        confirmationModal.isWarning = true;
        confirmationModal.Open();
        confirmationModal.OnConfirm(async () =>
        {
            try
            {
                // DELETE api/comentarios/id
                HttpResponseMessage response = await httpClient.DeleteAsync(URLApiComments + "/" + comment.Id.ToString());
                await CheckResponse(response);
            }
            catch (HttpRequestException exception)
            {
                ShowModalError(ERROR_UNKNOWN + "Código de error: " + exception);
            }
        });
    }

    private void ShowModalError(string err)
    {
        errorMessage = err;
        errorModal.isError = true;
        errorModal.Open();
    }

    private async Task CheckResponse(HttpResponseMessage response)
    {
        if (response.IsSuccessStatusCode)
        {
            await GetComments();
            successModal.isSuccess = true;
            successModal.Open();
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            ShowModalError(ERROR_BAD_REQUEST);
        else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            ShowModalError(ERROR_UNAUTHORIZED);
        else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            ShowModalError(ERROR_NOT_FOUND);
        else if (response.StatusCode == System.Net.HttpStatusCode.Conflict)
            ShowModalError(ERROR_CONFLICT);
        else
            ShowModalError(ERROR_UNKNOWN);
    }
}
