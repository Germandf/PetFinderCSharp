@using PetFinder.Areas.Identity.Extensions
@using PetFinder.ViewModels
@using Microsoft.Extensions.Configuration
@using Newtonsoft.Json
@using PetFinder.Areas.Identity
@using System.Net.Http.Headers
@using System.Text
@using System.Net
@inject IApplicationUserService ApplicationUserService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ICommentApiService CommentApiService

<div class="row">
    <h3 class="petSubTitle mt-3 mx-4">Comentarios</h3>
    <section class="mb-2 col-12">
        <AuthorizeView>
            <Authorized>
                <EditForm Context="editFormContext" Model="@_newComment" id="form-new-comment" class="g-bg-secondary rounded shadow mt-2 w-100 text-left p-2 u-shadow-v18">
                    <p class="mt-2">Agregar nuevo comentario... </p>
                    <textarea class="w-100 p-2" type="text" id="message" name="message" maxlength="200" @bind="_newComment.Message"></textarea>
                    <p class="mt-2 mb-2">
                        <span class="mr-2">¿Que tan seguro estas de haberlo visto?</span><input type="range" min="1" max="5" id="rate" @bind="_newComment.Rate">
                    </p>
                    <button type="button" class="btn bg-orange text-white mr-2 mt-1" @onclick="() => CreateComment(_newComment)">
                        Comentar
                    </button>
                </EditForm>
                <ModalWithValue TypeValue="string" @ref="                    EditModal">
                    <Title>
                        Editar
                    </Title>
                    <Body>
                    <p>
                        <textarea class="w-100 p-2" type="text" maxlength="200" @bind="EditModal.value"></textarea>
                    </p>
                    </Body>
                    <Footer>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => EditModal.Close()">Cancelar</button>
                        <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="() => EditModal.Confirm()">Confirmar</button>
                    </Footer>
                </ModalWithValue>
                <Modal @ref="ConfirmationModal">
                    <Title>
                        Eliminar
                    </Title>
                    <Body>
                    <p>
                        ¿Está seguro que desea eliminar?
                    </p>
                    </Body>
                    <Footer>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => ConfirmationModal.Close()">Cancelar</button>
                        <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="() => ConfirmationModal.Confirm()">Confirmar</button>
                    </Footer>
                </Modal>
                <Modal @ref="ErrorModal">
                    <Title>
                        Error
                    </Title>
                    <Body>
                    <p>
                        @ErrorMessage
                    </p>
                    </Body>
                    <Footer>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => ErrorModal.Close()">Entendido</button>
                    </Footer>
                </Modal>
                <Modal @ref="SuccessModal">
                    <Title>
                        ¡Éxito!
                    </Title>
                    <Body>
                    <p>
                        La tarea solicitada se realizó correctamente
                    </p>
                    </Body>
                    <Footer>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => SuccessModal.Close()">Cerrar</button>
                    </Footer>
                </Modal>
            </Authorized>
        </AuthorizeView>
    </section>
    <section id="comments" class="col-12">
        @foreach (var comment in _comments)
        {
            <div class="media g-mb-30 media-comment">
                <div class="media-body shadow g-bg-secondary g-pa-30">
                    <div class="g-mb-15">
                        <h3 class="h5 mb-0">@comment.User.Name @comment.User.Surname </h3>
                    </div>
                    <p>@comment.Message</p>
                    <p>
                        <b>Seguridad de haberlo visto @comment.Rate / 5</b>
                    </p>
                    <AuthorizeView>
                        <Authorized>
                            <!-- Si es el dueño del comentario o es admin -->
                            <button class="btn" @onclick="() => UpdateComment(comment)">
                                <i class="text-primary fa fa-pencil-alt"></i>
                            </button>
                            <button class="btn" @onclick="() => DeleteComment(comment)">
                                <i class="text-danger fa fa-trash"></i>
                            </button>
                        </Authorized>
                    </AuthorizeView>
                </div>
            </div>
        }
        @if (_comments.Count == 0)
        {
            <p class="ml-2">No hay comentarios disponibles. Si eres un usuario registrado, eres libre de comentar cuanto quieras.</p>
        }
    </section>
</div>

@code {

    [Parameter]
    public int PetId { get; set; }

    private ModalWithValue<string> EditModal { get; set; }
    private Modal ConfirmationModal { get; set; }
    private Modal ErrorModal { get; set; }
    private Modal SuccessModal { get; set; }
    private string ErrorMessage { get; set; }
    private string Jwt { get; set; }

    private readonly HttpClient _httpClient = new();
    private ApplicationUser _user = null;
    private CommentViewModel _newComment = new();
    private List<CommentViewModel> _comments = new();

    protected override async Task OnInitializedAsync()
    {
        _user = await ApplicationUserService.GetCurrent();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userClaims = authState.User;
        await GetComments();
        var token =  userClaims.Identity.GetJwt();
        CommentApiService.SetJwt(token);
    }

    private async void CreateComment(CommentViewModel commentViewModel)
    {
        var response = await CommentApiService.CreateComment(commentViewModel, PetId, _user);
        await CheckResponse(response);
        _newComment.Message = "";
        _newComment.Rate = 1;
    }

    private void DeleteComment(CommentViewModel commentViewModel)
    {
        ConfirmationModal.IsWarning = true;
        ConfirmationModal.Open();
        ConfirmationModal.OnConfirm(async () =>
        {
            var response = await CommentApiService.DeleteComment(commentViewModel);
            await CheckResponse(response);
        });
    }

    private async Task GetComments()
    {
        try
        {
            var response = await CommentApiService.GetComments(PetId);
            var commentsFromApi = await response.Content.ReadAsAsync<CommentViewModel[]>();
            if (commentsFromApi == null)
                commentsFromApi = new CommentViewModel[0];
            _comments.Clear();
            _comments.AddRange(commentsFromApi);
            _comments.Reverse();
            StateHasChanged();
        }
        catch (HttpRequestException exception)
        {
            ShowModalError(Data.CommentApiService.ErrorUnknown + "Código de error: " + exception);
        }
    }

    private void UpdateComment(CommentViewModel commentViewModel)
    {
        EditModal.valueChange(commentViewModel.Message);
        EditModal.IsEditing = true;
        EditModal.Open();
        EditModal.OnConfirm(async () =>
        {
            commentViewModel.Message = EditModal.value;
            var response = await CommentApiService.UpdateComment( commentViewModel);
            await CheckResponse(response);
        });
    }

    private void ShowModalError(string error)
    {
        ErrorMessage = error;
        ErrorModal.IsError = true;
        ErrorModal.Open();
    }

    private async Task CheckResponse(HttpResponseMessage response)
    {
        if (response.IsSuccessStatusCode)
        {
            await GetComments();
            SuccessModal.IsSuccess = true;
            SuccessModal.Open();
        }
        else if (response.StatusCode == HttpStatusCode.BadRequest)
            ShowModalError(Data.CommentApiService.ErrorBadRequest);
        else if (response.StatusCode == HttpStatusCode.Unauthorized)
            ShowModalError(Data.CommentApiService.ErrorUnauthorized);
        else if (response.StatusCode == HttpStatusCode.NotFound)
            ShowModalError(Data.CommentApiService.ErrorNotFound);
        else if (response.StatusCode == HttpStatusCode.Conflict)
            ShowModalError(Data.CommentApiService.ErrorConflict);
        else
            ShowModalError(Data.CommentApiService.ErrorUnknown);
    }
}